name: Documentation Verification

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]

jobs:
  verify-docs:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Verify repository structure
      run: |
        echo "Working directory: $(pwd)"
        echo "Repository contents:"
        ls -la
        echo "Python scripts:"
        ls -la *.py
        echo "Markdown files:"
        find . -name "*.md" | head -10
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Check Python script syntax
      run: |
        python -m py_compile verify_docs.py
        python -m py_compile extract_mermaid.py
        python -m py_compile test_links.py
        python -m py_compile generate_report.py
        echo "✅ All Python scripts have valid syntax"
        
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install Mermaid CLI
      run: |
        npm install -g @mermaid-js/mermaid-cli
        mmdc --version
        
    - name: Verify Puppeteer installation
      run: |
        # Install Chrome dependencies and timeout
        sudo apt-get update
        sudo apt-get install -y \
          ca-certificates \
          fonts-liberation \
          libappindicator3-1 \
          libasound2 \
          libatk-bridge2.0-0 \
          libatk1.0-0 \
          libc6 \
          libcairo2 \
          libcups2 \
          libdbus-1-3 \
          libexpat1 \
          libfontconfig1 \
          libgbm1 \
          libgcc1 \
          libglib2.0-0 \
          libgtk-3-0 \
          libnspr4 \
          libnss3 \
          libpango-1.0-0 \
          libpangocairo-1.0-0 \
          libstdc++6 \
          libx11-6 \
          libx11-xcb1 \
          libxcb1 \
          libxcomposite1 \
          libxcursor1 \
          libxdamage1 \
          libxext6 \
          libxfixes3 \
          libxi6 \
          libxrandr2 \
          libxrender1 \
          libxss1 \
          libxtst6 \
          lsb-release \
          wget \
          xdg-utils \
          coreutils
        
    - name: Run documentation verification
      run: |
        python verify_docs.py
        echo "Verification script completed with exit code: $?"
      
    - name: Extract and test Mermaid diagrams
      run: |
        python extract_mermaid.py
        echo "Checking extracted diagrams:"
        ls -la extracted_diagrams/ || echo "No extracted_diagrams directory found"
        if [ -d "extracted_diagrams" ]; then
          echo "Diagram files:"
          ls -la extracted_diagrams/*.mmd || echo "No .mmd files found"
          echo "Summary file:"
          cat extracted_diagrams/summary.json || echo "No summary.json found"
        fi
        
    - name: Test Mermaid diagram rendering
      run: |
        # Test each extracted Mermaid diagram
        if [ -d "extracted_diagrams" ]; then
          cd extracted_diagrams
          echo "Found diagrams:"
          ls -la *.mmd || echo "No .mmd files found"
          echo "Puppeteer config:"
          cat puppeteer.config.json || echo "No puppeteer config found"
          
          for diagram in *.mmd; do
            if [ -f "$diagram" ]; then
              echo "Testing diagram: $diagram"
              echo "Content preview:"
              head -5 "$diagram"
              
              # Try rendering with timeout
              timeout 60s mmdc -i "$diagram" -o "${diagram%.mmd}.png" --puppeteerConfig puppeteer.config.json
              if [ $? -eq 0 ]; then
                echo "✅ Successfully rendered: $diagram"
              else
                echo "❌ Failed to render: $diagram"
                echo "Puppeteer config:"
                cat puppeteer.config.json
                echo "Trying without puppeteer config..."
                timeout 60s mmdc -i "$diagram" -o "${diagram%.mmd}.png"
                if [ $? -eq 0 ]; then
                  echo "✅ Successfully rendered without config: $diagram"
                else
                  echo "❌ Failed to render even without config: $diagram"
                  exit 1
                fi
              fi
            fi
          done
        else
          echo "No diagrams found to test"
        fi
        
    - name: Test internal links
      run: |
        python test_links.py
        echo "Link test results:"
        if [ -f "link_test_results.json" ]; then
          cat link_test_results.json
        else
          echo "No link test results file found"
        fi
        
    - name: Upload test artifacts
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: verification-results
        path: |
          extracted_diagrams/
          *.log
          verification_report.json
        retention-days: 7
        
    - name: Generate verification report
      if: always()
      run: |
        python generate_report.py > verification_summary.md
        echo "Report generated:"
        ls -la verification_summary.md || echo "No report file generated"
        if [ -f "verification_summary.md" ]; then
          echo "Report content:"
          head -20 verification_summary.md
        fi
        
    - name: Comment PR with results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          if (fs.existsSync('verification_summary.md')) {
            const report = fs.readFileSync('verification_summary.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## 📋 Documentation Verification Report\n\n${report}`
            });
          }
